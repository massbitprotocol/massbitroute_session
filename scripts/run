#!/bin/bash
TYPE="session"

SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)

export HOME=$SITE_ROOT
source $SITE_ROOT/env/env.sh
source $SITE_ROOT/scripts/base.sh >/dev/null

cd $SITE_ROOT

mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services

chmod +x $SITE_ROOT/scripts/run
export GIT_PUBLIC_URL=https://github.com

_repo() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	if [ -z "$GIT_PUBLIC_URL" ]; then
		echo "GIT_PUBLIC_URL missing"
		exit 1
	fi

	export ENV_BRANCH=${ENV_BRANCH:-$GIT_PRIVATE_BRANCH}

	export ASDF_BRANCH=latest
	export GBC_BRANCH=latest
	export MKAGENT_BRANCH=latest

	#$mbr_root/gbc/bin/.asdf|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_asdf|$ASDF_BRANCH \
	_env
	REPOS="\
	   $service_dir/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git|$MKAGENT_BRANCH \
	 $mbr_root/gbc|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc|$GBC_BRANCH \
"
}

_repo_private() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	if [ -z "$GIT_PRIVATE_READ_URL" ]; then
		echo "GIT_PRIVATE_READ_URL missing"
		exit 1
	fi
	if [ -z "$GIT_PRIVATE_BRANCH" ]; then
		echo "GIT_PRIVATE_BRANCH missing"
		exit 1
	fi

	export ENV_BRANCH=${ENV_BRANCH:-$GIT_PRIVATE_BRANCH}
	export SSL_BRANCH=${SSL_BRANCH:-$GIT_PRIVATE_BRANCH}

	_env
	REPOS_PRIVATE="\
$SITE_ROOT/env|$GIT_PRIVATE_READ_URL/massbitroute/env.git|$ENV_BRANCH \
/etc/letsencrypt|$GIT_PRIVATE_READ_URL/massbitroute/ssl.git|$SSL_BRANCH \
"
	REPOS_RUNTIME="\ 
"

}

_save_env() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi

	if [ -z "$PORTAL_URL" ]; then
		echo "PORTAL_URL missing"
		exit 1
	else
		echo $PORTAL_URL >$SITE_ROOT/vars/PORTAL_URL
	fi
	if [ -z "$DOMAIN" ]; then
		DOMAIN=$(echo $PORTAL_URL | cut -d'.' -f2-)
	fi
	if [ -z "$DOMAIN" ]; then
		echo "DOMAIN missing"
		exit 1
	else
		echo $DOMAIN >$SITE_ROOT/vars/DOMAIN
		cat >$SITE_ROOT/src/env.lua <<EOF
return {
["DOMAIN"] = "$DOMAIN"
}
EOF
	fi
}

# _repo() {
# 	if [ -z "$MBR_ENV" ]; then
# 		echo "MBR_ENV missing"
# 		exit 1
# 	fi
# 	if [ -z "$GIT_PUBLIC_URL" ]; then
# 		echo "GIT_PUBLIC_URL missing"
# 		exit 1
# 	fi

# 	export ENV_BRANCH=${ENV_BRANCH:-$GIT_PRIVATE_BRANCH}

# 	export ASDF_BRANCH=latest
# 	export GBC_BRANCH=latest
# 	export MKAGENT_BRANCH=latest

# 	REPOS="\
# 	   $service_dir/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git|$MKAGENT_BRANCH \
# 	 $mbr_root/gbc|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc|$GBC_BRANCH \
# 	 $mbr_root/gbc/bin/.asdf|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_asdf|$ASDF_BRANCH \
# "

# }

# _repo_private() {
# 	if [ -z "$MBR_ENV" ]; then
# 		echo "MBR_ENV missing"
# 		exit 1
# 	fi
# 	if [ \( -z "$GIT_PRIVATE_READ_URL" \) -o \( -z "$GIT_PRIVATE_DOMAIN" ] \) ]; then
# 		echo "GIT_PRIVATE_READ_URL|GIT_PRIVATE_DOMAIN missing"
# 		exit 1
# 	fi
# 	if [ -z "$GIT_PRIVATE_BRANCH" ]; then
# 		echo "GIT_PRIVATE_BRANCH missing"
# 		exit 1
# 	fi

# 	export ENV_BRANCH=${ENV_BRANCH:-$GIT_PRIVATE_BRANCH}
# 	export SSL_BRANCH=${SSL_BRANCH:-$GIT_PRIVATE_BRANCH}

# 	_env
# 	REPOS_PRIVATE="\
# $SITE_ROOT/env|$GIT_PRIVATE_READ_URL/massbitroute/env.git|$ENV_BRANCH \
# /etc/letsencrypt|$GIT_PRIVATE_READ_URL/massbitroute/ssl.git|$SSL_BRANCH \
# "
# 	REPOS_RUNTIME="\

# "
# }

_prepare() {
	echo "Prepare"
	mkdir -p $SITE_ROOT/logs/nginx $SITE_ROOT/db $SITE_ROOT/tmp $SITE_ROOT/db
	# rm -rf $SITE_ROOT/tmp/*

}
_run_test() {
	cd $SITE_ROOT
	export PATH=$PATH:$SITE_ROOT/bin/openresty/nginx/sbin

	supervisorctl stop mbr_api_monitor

	rm $SITE_ROOT/src/env.lua
	env_src=$SITE_ROOT/env/env.lua
	sed /PARTNER_ID/d -i $env_src
	sed /SID/d -i $env_src
	sed '/}/i ["PARTNER_ID"]="fc78b64c5c33f3f270700b0c4d3e7998188035ab",' -i $env_src
	sed '/}/i ["SID"]="403716b0f58a7d6ddec769f8ca6008f2c1c0cea6"' -i $env_src

	cp $env_src $SITE_ROOT/src/env.lua
	_reload

	if [ $# -ne 0 ]; then
		prove -r $@
	else
		prove -r t
	fi

}

_install_test() {
	apt update
	apt install -y make
	export PERL_MM_USE_DEFAULT=1
	yes | cpan -i Test::Nginx
	cd $SITE_ROOT
	ls -d $SITE_ROOT/.cpan/build/* /root/.cpan/build/* | while read d; do
		cd $d
		make install
		cd -
	done
}

_install_repos() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	_repo
	_install_sources $REPOS
	_install_status=$?
	return $_install_status
}

_update_repos() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	if [ -z "$GIT_PRIVATE_READ_URL" ]; then
		echo "Need GIT_PRIVATE_READ_URL"
		exit 1
	fi
	_update_status=0

	_repo
	_update_sources $REPOS
	_st=$?
	if [ $_update_status -eq 0 ]; then
		_update_status=$_st
	fi

	_repo_private
	_update_sources $REPOS_PRIVATE
	_st=$?
	if [ $_update_status -eq 0 ]; then
		_update_status=$_st
	fi

	# _update_status=$?
	# _update_sources $REPOS_RUNTIME
	# _st=$?
	# if [ $_update_status -eq 0 ]; then
	# 	_update_status=$_st
	# fi
	return $_update_status
}

_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	# apt-get update
	# apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev \
	# 	liburcu-dev libev-dev libsodium-dev libtool libunwind-dev libmaxminddb-dev

	if [ -f "/usr/bin/systemctl" ]; then

		systemctl enable supervisor
		systemctl start supervisor

	fi
	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	if [ "$MBR_MODE" != "docker" ]; then
		supervisorctl update
	fi
}

_install_one() {
	_prepare
	_install_repos
}
_install() {
	_install_one
	_supervisor
}

_reload() {
	pkill -f push.py

	$SITE_ROOT/cmd_server _update
	$SITE_ROOT/cmd_server update
	$SITE_ROOT/cmd_server start all

}

_update() {
	echo "Update"
	_update_repos
	_st_update=$?

	return $_st_update

}

_monitor() {
	_update
	is_reload=$?

	if [ $is_reload -ne 0 ]; then
		bash $0 _reload
	fi
}
_run() {
	rm -rf $SITE_ROOT/tmp/*
	_update
	$SITE_ROOT/start_server
}

$@
